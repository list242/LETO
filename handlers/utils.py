from datetime import datetime, timedelta  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ datetime –∏ timedelta
import calendar  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ calendar
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from handlers.button_handler import ContextTypes, ConversationHandler  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ ContextTypes –∏ ConversationHandler
from datetime import datetime
import json
import requests
import os, asyncio
import re
from yclients_api import get_yclients_bookings
from bookings_storage import save_booking_to_file, delete_booking, get_booking, get_all_bookings

ADMIN_FILE = "admins.json"
MAX_DATE = datetime(2025, 8, 31).date()
ENTERING_NAME, ENTERING_PHONE = range(2)
RUSSIAN_DAY_ABBREVIATIONS = {0: "–ü–Ω",1: "–í—Ç",2: "–°—Ä",3: "–ß—Ç",4: "–ü—Ç",5: "–°–±",6: "–í—Å"}

def is_slot_taken_yclients(date: str, time_range: str, staff_id: int) -> bool:
    bookings = get_yclients_bookings(date)
    start_time = time_range.split(" - ")[0]

    for b in bookings:
        b_time = b.get("datetime", "")
        b_staff_id = b.get("staff", {}).get("id")

        if b_staff_id == staff_id and b_time.endswith(f"{start_time}:00"):
            return True
    return False


def load_admins():
    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as file:
            return set(json.load(file))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    except FileNotFoundError:
        return set()  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

def format_date(date):
    day_name = RUSSIAN_DAY_ABBREVIATIONS[date.weekday()]  
    return f"{date.strftime('%d.%m.%Y')} ({day_name})"

def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    admins_file = os.path.join(os.path.dirname(__file__), "..", "admins.json")
    try:
        with open(admins_file, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return []
    
def generate_date_keyboard(start_date, context):
    keyboard = []
    current_date = start_date + timedelta(days=1) 
    days_shown = 0

    if start_date == datetime.now().date():
        while days_shown < 7 and current_date.weekday() != calendar.SUNDAY and current_date <= MAX_DATE:
            date_str = format_date(current_date)  
            callback_data = f"date-{current_date.isoformat()}"  
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
            current_date += timedelta(days=1)
            days_shown += 1

        if current_date.weekday() == calendar.SUNDAY and current_date <= MAX_DATE:
            date_str = format_date(current_date) 
            callback_data = f"date-{current_date.isoformat()}"  
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])

    else:
        if current_date.weekday() != 0:
            days_until_monday = (7 - current_date.weekday()) % 7
            current_date += timedelta(days=days_until_monday)

        for _ in range(7):
            if current_date > MAX_DATE:
                break 
            date_str = format_date(current_date)  
            callback_data = f"date-{current_date.isoformat()}" 
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
            current_date += timedelta(days=1)

    if current_date > MAX_DATE:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    else:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data="forward")])
    return InlineKeyboardMarkup(keyboard)

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str, user_chat_id: int):
    admin_chat_ids = load_admins()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not admin_chat_ids:
        print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for admin_chat_id in admin_chat_ids:
        try:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve-{user_chat_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject-{user_chat_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(chat_id=admin_chat_id, text=message, reply_markup=reply_markup)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}: {e}")

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    user_chat_id = update.effective_user.id

    if not user_input or len(user_input) < 2:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ENTERING_NAME

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await asyncio.sleep(1.5)
    await update.message.delete()

    context.user_data["user_name"] = user_input
    context.user_data["state"] = ENTERING_PHONE

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    message_id = context.user_data.get("booking_message_id")
    boat = context.user_data.get("selected_boat", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    date = context.user_data.get("selected_date", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    time = context.user_data.get("selected_time", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    text = (
        f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"- –õ–æ–¥–∫–∞: {boat}\n"
        f"- –î–∞—Ç–∞: {date}\n"
        f"- –í—Ä–µ–º—è: {time}\n"
        f"- –ò–º—è: {user_input}\n\n"
        f"üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

    sent = await context.bot.edit_message_text(
        chat_id=user_chat_id,
        message_id=message_id,
        text=text
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ Telegram —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data["booking_message_id"] = sent.message_id

    return ENTERING_PHONE

async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    user_chat_id = update.effective_user.id

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if user_input.startswith("8") and len(user_input) == 11:
        user_input = "+7" + user_input[1:]
    elif user_input.startswith("7") and len(user_input) == 11:
        user_input = "+7" + user_input[1:]
    elif user_input.startswith("+7") and len(user_input) == 12:
        pass  # –≤—Å—ë –æ–∫
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return ENTERING_PHONE

    # –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if not re.match(r"^\+7\d{10}$", user_input):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return ENTERING_PHONE

    # –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è
    await asyncio.sleep(1.5)
    await update.message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data["phone_number"] = user_input
    context.user_data.pop("state", None)

    boat = context.user_data.get("selected_boat")
    date = context.user_data.get("selected_date")
    time = context.user_data.get("selected_time")
    name = context.user_data.get("user_name")
    message_id = context.user_data.get("booking_message_id")

    confirmation_text = (
        f"üìå –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
        f"- –õ–æ–¥–∫–∞: {boat}\n"
        f"- –î–∞—Ç–∞: {date}\n"
        f"- –í—Ä–µ–º—è: {time}\n"
        f"- –ò–º—è: {name}\n"
        f"- –¢–µ–ª–µ—Ñ–æ–Ω: {user_input}\n"
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
    ])

    await context.bot.edit_message_text(
        chat_id=user_chat_id,
        message_id=message_id,
        text=confirmation_text,
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    context.bot_data[f"booking_msg_id-{user_chat_id}"] = message_id
    context.bot_data[user_chat_id] = {
        "selected_boat": boat,
        "selected_date": date,
        "selected_time": time,
        "user_name": name,
        "phone_number": user_input
    }

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (
        f"üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!**\n"
        f"- üö§ –õ–æ–¥–∫–∞: {boat}\n"
        f"- üìÖ –î–∞—Ç–∞: {date}\n"
        f"- ‚è∞ –í—Ä–µ–º—è: {time}\n"
        f"- üë§ –ò–º—è: {name}\n"
        f"- üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_input}"
    )
    context.bot_data[f"pending-{user_chat_id}"] = True
    context.bot_data[f"pending_msg_id-{user_chat_id}"] = message_id
    await notify_admin(context, admin_message, user_chat_id)
    return ConversationHandler.END
BOOKINGS_FILE = "bookings.json"

def get_taken_slots(date: str, boat: str, staff_id: int) -> set:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ YCLIENTS –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    taken = set()

    # üîπ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (Telegram)
    try:
        all_bookings = get_all_bookings()
        for b in all_bookings.values():
            if b.get("selected_date") == date and b.get("selected_boat") == boat:
                taken.add(b.get("selected_time"))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è local bookings: {e}")

    # üîπ –ó–∞–ø–∏—Å–∏ –∏–∑ YCLIENTS
    try:
        external = get_yclients_bookings(date)
        for record in external:
            if record.get("staff", {}).get("id") == staff_id:
                dt = record.get("datetime")
                try:
                    parsed = datetime.fromisoformat(dt)
                    hour = parsed.strftime("%H:%M")
                    end = (parsed + timedelta(minutes=90)).strftime("%H:%M")
                    slot = f"{hour} - {end}"
                    taken.add(slot)
                except Exception:
                    continue
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –∏–∑ YCLIENTS: {e}")

    return taken

def create_yclients_booking(data: dict):
    url = "https://api.yclients.com/api/v1/record"
    headers = {
        "Authorization": "Bearer c4033acd6cf298f0c854a9e252ce6226",
        "Content-Type": "application/json"
    }

    payload = {
        "company_id": 1275464,
        "service_ids": [19053129],  # –ü—Ä–æ–∫–∞—Ç –ª–æ–¥–∫–∏
        "staff_id": 3811393,        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫
        "datetime": f"{data['selected_date']}T{data['start_time']}:00",
        "client": {
            "name": data["user_name"],
            "phone": data["phone_number"]
        },
        "comment": f"–õ–æ–¥–∫–∞: {data['selected_boat']}, –í—Ä–µ–º—è: {data['selected_time']}"
    }

    response = requests.post(url, json=payload, headers=headers)
    print("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –±—Ä–æ–Ω–∏ –≤ YCLIENTS:", response.status_code, response.text)
    return response.status_code == 200