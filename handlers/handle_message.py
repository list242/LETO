import json
import os
import asyncio
import calendar
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from handlers.utils import (
    generate_date_keyboard,
    notify_admin,
    ENTERING_PHONE,
    ENTERING_NAME,
    enter_name,
    enter_phone,
    get_taken_slots,
    is_slot_taken_yclients,
    load_admins,
)

from bookings_storage import (
    save_booking_to_file,
    delete_booking,
    get_booking,
    get_all_bookings,
)

from weather import get_weather_for_date
from yclients_api import (
    create_yclients_booking,
    get_yclients_bookings,
    DEFAULT_STAFF_ID,
)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if query:
        user_chat_id = update.effective_user.id
        admins = load_admins()
        if user_chat_id not in admins and any([
            context.bot_data.get(f"pending-{user_chat_id}"),
            context.bot_data.get(f"reschedule-{user_chat_id}"),
            context.bot_data.get(f"cancel-{user_chat_id}")
        ]):
            await query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await query.answer() 
        data = query.data

        if data in ["blue", "red", "white"]:
            selected_boat = {
                "blue": "–°–∏–Ω—è—è",
                "red": "–ö—Ä–∞—Å–Ω–∞—è",
                "white": "–ë–µ–ª–∞—è"
            }[data]
            context.user_data["selected_boat"] = selected_boat

            today = datetime.now().date()
            context.user_data["current_week_start"] = today

            keyboard = generate_date_keyboard(today, context)
            reply_markup = keyboard

            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {selected_boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )

        elif data.startswith("date-"):
            selected_date = data.replace("date-", "", 1)
            try:
                datetime.fromisoformat(selected_date)
                context.user_data["selected_date"] = selected_date
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            weather = get_weather_for_date(selected_date)

            weather_text = (
                f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n"
            )
            if weather["rain"]:
                weather_text += "üåßÔ∏è –û—Å–∞–¥–∫–∏: –≤–æ–∑–º–æ–∂–Ω—ã\n"

            weather_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"

            time_slots = [
                "11:00 - 12:30",
                "13:00 - 14:30",
                "15:00 - 16:30",
                "17:00 - 18:30",
                "19:00 - 20:30",
                "21:00 - 22:30"
            ]
            staff_map = {
                "–°–∏–Ω—è—è": 3832174,
                "–ö—Ä–∞—Å–Ω–∞—è": 3832174,
                "–ë–µ–ª–∞—è": 3832174
            }

            boat = context.user_data.get("selected_boat")
            staff_id = staff_map.get(boat, DEFAULT_STAFF_ID)
            taken_slots = get_taken_slots(selected_date, boat, staff_id)

            available_slots = [
                [InlineKeyboardButton(slot, callback_data=f"time-{slot}")]
                for slot in time_slots if slot not in taken_slots
            ]

            if not available_slots:
                available_slots.append([InlineKeyboardButton("‚ùå –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã", callback_data="back")])

            available_slots.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
            reply_markup = InlineKeyboardMarkup(available_slots)

            await query.edit_message_text(
                text=weather_text,
                reply_markup=reply_markup
            )


        elif data == "go_back":

            keyboard = [
                [InlineKeyboardButton("–°–∏–Ω—è—è –ª–æ–¥–∫–∞", callback_data="blue")],
                [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –ª–æ–¥–∫–∞", callback_data="red")],
                [InlineKeyboardButton("–ë–µ–ª–∞—è –ª–æ–¥–∫–∞", callback_data="white")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–¥–∫—É:", reply_markup=reply_markup)


            context.user_data.pop("user_name", None)
            context.user_data.pop("phone_number", None)
            context.user_data["state"] = None

        elif data == "back":

            current_week_start = context.user_data.get("current_week_start", datetime.now().date())
            prev_week_start = current_week_start - timedelta(days=7)
            if prev_week_start < datetime.now().date():
                keyboard = [
                        [InlineKeyboardButton("–°–∏–Ω—è—è –ª–æ–¥–∫–∞", callback_data="blue")],
                        [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –ª–æ–¥–∫–∞", callback_data="red")],
                        [InlineKeyboardButton("–ë–µ–ª–∞—è –ª–æ–¥–∫–∞", callback_data="white")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ]

                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫—É—é –ª–æ–¥–∫—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?",
                    reply_markup=reply_markup
                )
            else:

                context.user_data["current_week_start"] = prev_week_start
                keyboard = generate_date_keyboard(prev_week_start, context)
                reply_markup = keyboard
                boat = context.user_data.get("selected_boat")
                await query.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=reply_markup
                )
        elif data == "back_to_start":
            if context.bot_data.get(f"pending-{user_chat_id}"):
                await query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            keyboard = []
            if get_booking(user_chat_id):

                keyboard.append([InlineKeyboardButton("üìå –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_booking")])

            else:
                keyboard.append([InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")])

            keyboard.append([InlineKeyboardButton("üìò –ü—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", callback_data="start_quiz")])
            keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])
            keyboard.append([InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", 
                reply_markup=reply_markup
            )



        elif data == "forward":
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())
            next_week_start = current_week_start + timedelta(days=7)
            context.user_data["current_week_start"] = next_week_start 


            keyboard = generate_date_keyboard(next_week_start, context)
            reply_markup = keyboard

            boat = context.user_data.get("selected_boat")
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )
        elif data == "faq":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                    "- üìÖ –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å?\n"
                    "- ‚öì –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?\n"
                    "- üë∂ –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
        elif data == "my_booking":
            booking = get_booking(user_chat_id)
            if not booking:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
                return
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            name = context.user_data.get("user_name", "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–æ")
            phone = context.user_data.get("phone_number", "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–æ")

            message = (
                f"üìå –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {date}\n"
                f"- –í—Ä–µ–º—è: {time}\n"
                f"- –ò–º—è: {name}\n"
                f"- –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )
            keyboard = [
                [InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup)

        # –ü–µ—Ä–µ–Ω–æ—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

        elif data == "help":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n"
                    "1Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É?\n"
                    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–¥–∫–æ–π?\n"
                    "3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
        
        elif data.startswith("time-"):
            if get_booking(user_chat_id):
                await query.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.")
                return

            selected_time = data.replace("time-", "", 1)
            context.user_data["selected_time"] = selected_time
            context.user_data["state"] = ENTERING_NAME

            boat = context.user_data.get("selected_boat")
            date = context.user_data.get("selected_date")

            if not date or not isinstance(date, str):
                await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            try:
                formatted_date = datetime.fromisoformat(date).strftime('%d.%m.%Y')
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            text = (
                f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {formatted_date}\n"
                f"- –í—Ä–µ–º—è: {selected_time}\n\n"
                f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )

            await query.edit_message_text(text=text)

            context.user_data["booking_message_id"] = query.message.message_id

            return ENTERING_NAME
