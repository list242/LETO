import json
import os
import asyncio
import calendar
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.utils import generate_date_keyboard, notify_admin, ENTERING_PHONE, enter_name, enter_phone
from handlers.utils import ENTERING_NAME
from handlers.utils import save_booking_to_file, delete_booking, get_taken_slots
from weather import get_weather_for_date
from yclients_api import create_yclients_booking
from datetime import datetime# –¥–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
from handlers.utils import is_slot_taken_yclients, load_admins
from yclients_api import get_yclients_bookings, DEFAULT_STAFF_ID
from bookings_storage import save_booking_to_file, delete_booking, get_booking, get_all_bookings


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if query:
        user_chat_id = update.effective_user.id
        admins = load_admins()
        if user_chat_id not in admins and any([
            context.bot_data.get(f"pending-{user_chat_id}"),
            context.bot_data.get(f"reschedule-{user_chat_id}"),
            context.bot_data.get(f"cancel-{user_chat_id}")
        ]):
            await query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await query.answer() 
        data = query.data

        if data in ["blue", "red", "white"]:
            selected_boat = {
                "blue": "–°–∏–Ω—è—è",
                "red": "–ö—Ä–∞—Å–Ω–∞—è",
                "white": "–ë–µ–ª–∞—è"
            }[data]
            context.user_data["selected_boat"] = selected_boat

            today = datetime.now().date()
            context.user_data["current_week_start"] = today

            keyboard = generate_date_keyboard(today, context)
            reply_markup = keyboard

            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {selected_boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )

        elif data.startswith("date-"):
            selected_date = data.replace("date-", "", 1)
            try:
                datetime.fromisoformat(selected_date)
                context.user_data["selected_date"] = selected_date
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            weather = get_weather_for_date(selected_date)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–≥–æ–¥–æ–π
            weather_text = (
                f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n"
            )
            if weather["rain"]:
                weather_text += "üåßÔ∏è –û—Å–∞–¥–∫–∏: –≤–æ–∑–º–æ–∂–Ω—ã\n"

            weather_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
            time_slots = [
                "11:00 - 12:30",
                "13:00 - 14:30",
                "15:00 - 16:30",
                "17:00 - 18:30",
                "19:00 - 20:30",
                "21:00 - 22:30"
            ]
            staff_map = {
                "–°–∏–Ω—è—è": 3813130,
                "–ö—Ä–∞—Å–Ω–∞—è": 3811393,
                "–ë–µ–ª–∞—è": 3819999
            }

            boat = context.user_data.get("selected_boat")
            staff_id = staff_map.get(boat, DEFAULT_STAFF_ID)
            taken_slots = get_taken_slots(selected_date, boat, staff_id)

            available_slots = [
                [InlineKeyboardButton(slot, callback_data=f"time-{slot}")]
                for slot in time_slots if slot not in taken_slots
            ]

            if not available_slots:
                available_slots.append([InlineKeyboardButton("‚ùå –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã", callback_data="back")])

            available_slots.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
            reply_markup = InlineKeyboardMarkup(available_slots)

            await query.edit_message_text(
                text=weather_text,
                reply_markup=reply_markup
            )


        elif data == "go_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±–æ—Ä –ª–æ–¥–∫–∏
            keyboard = [
                [InlineKeyboardButton("–°–∏–Ω—è—è –ª–æ–¥–∫–∞", callback_data="blue")],
                [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –ª–æ–¥–∫–∞", callback_data="red")],
                [InlineKeyboardButton("–ë–µ–ª–∞—è –ª–æ–¥–∫–∞", callback_data="white")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–¥–∫—É:", reply_markup=reply_markup)

            # –û—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop("user_name", None)
            context.user_data.pop("phone_number", None)
            context.user_data["state"] = None

        elif data == "back":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())
            prev_week_start = current_week_start - timedelta(days=7)
            if prev_week_start < datetime.now().date():
                keyboard = [
                        [InlineKeyboardButton("–°–∏–Ω—è—è –ª–æ–¥–∫–∞", callback_data="blue")],
                        [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –ª–æ–¥–∫–∞", callback_data="red")],
                        [InlineKeyboardButton("–ë–µ–ª–∞—è –ª–æ–¥–∫–∞", callback_data="white")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ]

                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫—É—é –ª–æ–¥–∫—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?",
                    reply_markup=reply_markup
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
                context.user_data["current_week_start"] = prev_week_start
                keyboard = generate_date_keyboard(prev_week_start, context)
                reply_markup = keyboard
                boat = context.user_data.get("selected_boat")
                await query.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=reply_markup
                )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        elif data == "back_to_start":
            if context.bot_data.get(f"pending-{user_chat_id}"):
                await query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            keyboard = []
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ—è –∑–∞–ø–∏—Å—å"
            if get_booking(user_chat_id):
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±–æ—Ä –ª–æ–¥–∫–∏", –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
                keyboard.append([InlineKeyboardButton("üìå –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_booking")])

            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±–æ—Ä –ª–æ–¥–∫–∏"
            else:
                keyboard.append([InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")])

            keyboard.append([InlineKeyboardButton("üìò –ü—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", callback_data="start_quiz")])
            keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])
            keyboard.append([InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", 
                reply_markup=reply_markup
            )


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
        elif data == "forward":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            next_week_start = current_week_start + timedelta(days=7)
            context.user_data["current_week_start"] = next_week_start  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
            keyboard = generate_date_keyboard(next_week_start, context)
            reply_markup = keyboard

            boat = context.user_data.get("selected_boat")
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )
        elif data == "faq":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                    "- üìÖ –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å?\n"
                    "- ‚öì –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?\n"
                    "- üë∂ –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
        elif data == "my_booking":
            booking = get_booking(user_chat_id)
            if not booking:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
                return
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            name = context.user_data.get("user_name", "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–æ")
            phone = context.user_data.get("phone_number", "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–æ")

            message = (
                f"üìå –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {date}\n"
                f"- –í—Ä–µ–º—è: {time}\n"
                f"- –ò–º—è: {name}\n"
                f"- –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )

            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏", callback_data="cancel_booking")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏", callback_data="reschedule_booking")],
                [InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"# –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data == "cancel_booking":
            booking = get_booking(user_chat_id)
            if not booking:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
                return
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            user_chat_id = update.effective_user.id

            admin_message = (
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {date}\n"
                f"- –í—Ä–µ–º—è: {time}\n"
                f"- –ò–º—è: {name}\n"
                f"- –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )

            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±—Ä–æ–Ω—å
            delete_booking(user_chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await notify_admin(context, admin_message, user_chat_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
            context.bot_data[f"pending-{user_chat_id}"] = True
            context.bot_data[f"pending_msg_id-{user_chat_id}"] = query.message.message_id
            context.bot_data[f"cancel-{user_chat_id}"] = True
            context.bot_data[f"cancel_msg_id-{user_chat_id}"] = query.message.message_id

            user_message = "‚ùå –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(user_message, reply_markup=reply_markup)


        # –ü–µ—Ä–µ–Ω–æ—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data == "reschedule_booking":
            booking = get_booking(user_chat_id)
            if not booking:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
                return
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            user_chat_id = update.effective_user.id

            name = context.user_data.get("user_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            phone = context.user_data.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            admin_message = (
                f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {date}\n"
                f"- –í—Ä–µ–º—è: {time}\n"
                f"- üë§ –ò–º—è: {name}\n"
                f"- üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )

            delete_booking(user_chat_id)
            await notify_admin(context, admin_message, user_chat_id)

            user_message = "üîÑ –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω."
            keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot_data[f"reschedule-{user_chat_id}"] = True
            context.bot_data[f"reschedule_msg_id-{user_chat_id}"] = query.message.message_id
            await query.edit_message_text(user_message, reply_markup=reply_markup)

        elif data == "help":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n"
                    "1Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É?\n"
                    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–¥–∫–æ–π?\n"
                    "3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif data.startswith("time-"):
            if get_booking(user_chat_id):
                await query.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.")
                return

            selected_time = data.replace("time-", "", 1)
            context.user_data["selected_time"] = selected_time
            context.user_data["state"] = ENTERING_NAME

            boat = context.user_data.get("selected_boat")
            date = context.user_data.get("selected_date")

            if not date or not isinstance(date, str):
                await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            try:
                formatted_date = datetime.fromisoformat(date).strftime('%d.%m.%Y')
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –¢–µ–∫—Å—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∏–º—è
            text = (
                f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {formatted_date}\n"
                f"- –í—Ä–µ–º—è: {selected_time}\n\n"
                f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )

            await query.edit_message_text(text=text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            context.user_data["booking_message_id"] = query.message.message_id

            return ENTERING_NAME


        elif data.startswith("approve-"):
            user_chat_id = int(data.split("-")[1])
            is_reschedule = context.bot_data.get(f"reschedule-{user_chat_id}", False)
            is_cancel = context.bot_data.get(f"cancel-{user_chat_id}", False)

            if is_cancel:
                delete_booking(user_chat_id)
                context.bot_data.pop(f"cancel-{user_chat_id}", None)

                message_id = context.bot_data.pop(f"cancel_msg_id-{user_chat_id}", None)
                keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                if message_id:
                    await context.bot.edit_message_text(
                        chat_id=user_chat_id,
                        message_id=message_id,
                        text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                        reply_markup=reply_markup
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user_chat_id,
                        text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                        reply_markup=reply_markup
                    )
                await query.edit_message_text("‚úÖ –û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
                context.bot_data.pop(f"pending-{user_chat_id}", None)
                context.bot_data.pop(f"pending_msg_id-{user_chat_id}", None)
                context.bot_data.pop(f"cancel-{user_chat_id}", None)
                context.bot_data.pop(f"cancel_msg_id-{user_chat_id}", None)
                return

            try:
                if is_reschedule:
                    # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—å
                    delete_booking(user_chat_id)
                    context.bot_data.pop(f"reschedule-{user_chat_id}", None)

                    keyboard = [
                        [InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
                    ]
                    # –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

                    reply_markup = InlineKeyboardMarkup(keyboard)
                    message_id = context.bot_data.pop(f"reschedule_msg_id-{user_chat_id}", None)
                    if message_id:
                        await context.bot.edit_message_text(
                            chat_id=user_chat_id,
                            message_id=message_id,
                            text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
                                "–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.\n"
                                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–¥–∫—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å.",
                            reply_markup=reply_markup
                        )
                    else:
                        # fallback, –µ—Å–ª–∏ message_id –Ω–µ –Ω–∞–π–¥–µ–Ω
                        await context.bot.send_message(
                            chat_id=user_chat_id,
                            text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
                                "–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.\n"
                                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–¥–∫—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å.",
                            reply_markup=reply_markup
                        )
                    await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
                    return
            
                booking_data = context.bot_data.get(user_chat_id)
                if not booking_data:
                    raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏ –≤ context.bot_data")
                save_booking_to_file(user_chat_id, booking_data)
                context.bot_data.pop(f"pending-{user_chat_id}", None)
                # ‚¨áÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ Yclients API
                try:
                    date_str = booking_data.get("selected_date")
                    time_raw = booking_data.get("selected_time")

                    if not date_str or not time_raw:
                        raise ValueError("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏")

                    start_time = time_raw.split(" - ")[0]
                    existing = get_yclients_bookings(date_str)
                    staff_id = 3813130  # –∏–ª–∏ —á–µ—Ä–µ–∑ staff_map[boat]
                    start_time = f"{date_str}T{start_time}:00"

                    already_taken = any(
                        b.get("staff", {}).get("id") == staff_id and b.get("datetime") == start_time
                        for b in existing
                    )

                    if already_taken:
                        await context.bot.send_message(
                            chat_id=user_chat_id,
                            text="‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                        )
                        await query.edit_message_text("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
                        return

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ YCLIENTS
                    success = create_yclients_booking(
                        name=booking_data["user_name"],
                        phone=booking_data["phone_number"],
                        date=date_str,
                        boat=boat,
                        staff_id=19177301
                    )

                    if not success:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ YCLIENTS API")

                except Exception as api_error:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yclients API:", api_error)

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                confirmed_text = (
                    f"üìå –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
                    f"- –õ–æ–¥–∫–∞: {booking_data['selected_boat']}\n"
                    f"- –î–∞—Ç–∞: {booking_data['selected_date']}\n"
                    f"- –í—Ä–µ–º—è: {booking_data['selected_time']}\n"
                    f"- –ò–º—è: {booking_data['user_name']}\n"
                    f"- –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone_number']}\n"
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
                )


                keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                booking_message_id = context.bot_data.get(f"booking_msg_id-{user_chat_id}")

                try:
                    if booking_message_id:
                        await context.bot.edit_message_text(
                            chat_id=user_chat_id,
                            message_id=booking_message_id,
                            text=confirmed_text,
                            reply_markup=reply_markup
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=user_chat_id,
                            text=confirmed_text,
                            reply_markup=reply_markup
                        )
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                context.bot_data.pop(f"pending-{user_chat_id}", None)
                await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏: {e}")
            context.bot_data.pop(f"pending-{user_chat_id}", None)

            
        elif data.startswith("reject-"):
            user_chat_id = int(data.split("-")[1])

            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞–∂–∏–º–∞–ª "–ù–µ –æ–∫", —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if context.bot_data.get(f"reject-{user_chat_id}"):
                context.bot_data.pop(user_chat_id, None)  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏
                context.bot_data.pop(f"reject-{user_chat_id}", None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

                try:
                    await context.bot.send_message(
                        chat_id=user_chat_id,
                        text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞."
                    )
                    await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ "–ù–µ –æ–∫" ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            else:
                context.bot_data[f"reject-{user_chat_id}"] = True  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞–∂–∞–ª–∏ "–ù–µ –æ–∫"

                user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_chat_id}\n" \
                            f"üö§ –õ–æ–¥–∫–∞: {context.bot_data.get(user_chat_id, {}).get('selected_boat', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                            f"üìÖ –î–∞—Ç–∞: {context.bot_data.get(user_chat_id, {}).get('selected_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                            f"‚è∞ –í—Ä–µ–º—è: {context.bot_data.get(user_chat_id, {}).get('selected_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–∫", callback_data=f"approve-{user_chat_id}")],
                    [InlineKeyboardButton("‚ùå –ù–µ –æ–∫", callback_data=f"reject-{user_chat_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:\n\n{user_info}",
                    reply_markup=reply_markup
                )
                    

        elif data.startswith("final_approve-"):
            user_chat_id = int(data.split("-")[1])

            try:
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                         "–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±—Ä–æ–Ω—å."
                )

                await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")

        elif data.startswith("final_reject-"):
            user_chat_id = int(data.split("-")[1])

            try:
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                         "–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏–ª–µ."
                )

                await query.edit_message_text("‚ùå –ü–µ—Ä–µ–Ω–æ—Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")
    else:
        user_input = update.message.text.strip()
        state = context.user_data.get("state")
        
        if state == ENTERING_NAME:
            await enter_name(update, context)
        elif state == ENTERING_PHONE:
            await enter_phone(update, context)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            pass
