from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta
import calendar

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
MAX_DATE = datetime(2025, 8, 31).date()

# –†—É—Å—Å–∫–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
RUSSIAN_DAY_ABBREVIATIONS = {
    0: "–ü–Ω",
    1: "–í—Ç",
    2: "–°—Ä",
    3: "–ß—Ç",
    4: "–ü—Ç",
    5: "–°–±",
    6: "–í—Å"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
def format_date(date):
    day_name = RUSSIAN_DAY_ABBREVIATIONS[date.weekday()]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "–ü–Ω", "–í—Ç", "–°—Ä"
    return f"{date.strftime('%d.%m.%Y')} ({day_name})"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
def generate_date_keyboard(start_date, context):
    keyboard = []
    current_date = start_date + timedelta(days=1)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    days_shown = 0

    # –î–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    if start_date == datetime.now().date():
        while days_shown < 7 and current_date.weekday() != calendar.SUNDAY and current_date <= MAX_DATE:
            date_str = format_date(current_date)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: DD.MM.YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
            callback_data = f"date-{current_date.isoformat()}"  # Callback-–¥–∞–Ω–Ω—ã–µ: YYYY-MM-DD
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
            current_date += timedelta(days=1)
            days_shown += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if current_date.weekday() == calendar.SUNDAY and current_date <= MAX_DATE:
            date_str = format_date(current_date)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: DD.MM.YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
            callback_data = f"date-{current_date.isoformat()}"  # Callback-–¥–∞–Ω–Ω—ã–µ: YYYY-MM-DD
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])

    # –î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ–¥–µ–ª—å: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ 7 –¥–Ω–µ–π –∏–ª–∏ –¥–æ MAX_DATE
    else:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º
        if current_date.weekday() != 0:  # –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É
            days_until_monday = (7 - current_date.weekday()) % 7
            current_date += timedelta(days=days_until_monday)

        for _ in range(7):
            if current_date > MAX_DATE:
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            date_str = format_date(current_date)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: DD.MM.YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
            callback_data = f"date-{current_date.isoformat()}"  # Callback-–¥–∞–Ω–Ω—ã–µ: YYYY-MM-DD
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
            current_date += timedelta(days=1)

    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
    if current_date > MAX_DATE:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    else:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data="forward")])

    return InlineKeyboardMarkup(keyboard)
async def my_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    message = f"üîπ –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n- –õ–æ–¥–∫–∞: {boat}\n- –î–∞—Ç–∞: {date}\n- –í—Ä–µ–º—è: {time}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # –ï—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
    if query:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        data = query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –ª–æ–¥–∫—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if data in ["blue", "red", "white"]:
            selected_boat = {
                "blue": "–°–∏–Ω—è—è",
                "red": "–ö—Ä–∞—Å–Ω–∞—è",
                "white": "–ë–µ–ª–∞—è"
            }[data]
            context.user_data["selected_boat"] = selected_boat

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            today = datetime.now().date()
            context.user_data["current_week_start"] = today

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
            keyboard = generate_date_keyboard(today, context)
            reply_markup = keyboard

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {selected_boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif data.startswith("date-"):
            selected_date = data.replace("date-", "", 1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (YYYY-MM-DD)
            try:
                datetime.fromisoformat(selected_date)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                context.user_data["selected_date"] = selected_date
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            time_slots = [
                "11:00 - 12:30",
                "13:00 - 14:30",
                "15:00 - 16:30",
                "17:00 - 18:30",
                "19:00 - 20:30",
                "21:00 - 22:30"
            ]

            keyboard = []
            for slot in time_slots:
                keyboard.append([InlineKeyboardButton(slot, callback_data=f"time-{slot}")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                reply_markup=reply_markup
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        elif data == "back":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ
            prev_week_start = current_week_start - timedelta(days=7)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            if prev_week_start < datetime.now().date():
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ª–æ–¥–∫–∏
                keyboard = [
                    [InlineKeyboardButton("–°–∏–Ω—è—è", callback_data="blue")],
                    [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è", callback_data="red")],
                    [InlineKeyboardButton("–ë–µ–ª–∞—è", callback_data="white")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫—É—é –ª–æ–¥–∫—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?",
                    reply_markup=reply_markup
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
                context.user_data["current_week_start"] = prev_week_start

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                keyboard = generate_date_keyboard(prev_week_start, context)
                reply_markup = keyboard

                boat = context.user_data.get("selected_boat")
                await query.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=reply_markup
                )
        elif data == "back_to_start":
            keyboard = [
                [InlineKeyboardButton("üìå –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_booking")],
                [InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=reply_markup)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
        elif data == "forward":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            next_week_start = current_week_start + timedelta(days=7)
            context.user_data["current_week_start"] = next_week_start  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
            keyboard = generate_date_keyboard(next_week_start, context)
            reply_markup = keyboard

            boat = context.user_data.get("selected_boat")
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )
        elif data == "faq":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                    "- üìÖ –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å?\n"
                    "- ‚öì –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?\n"
                    "- üë∂ –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )

        elif data == "help":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n"
                    "1Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É?\n"
                    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–¥–∫–æ–π?\n"
                    "3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif data.startswith("time-"):
            selected_time = data.split("-")[1]
            boat = context.user_data.get("selected_boat")
            date = context.user_data.get("selected_date")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            if not date or not isinstance(date, str):
                await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
                formatted_date = datetime.fromisoformat(date).strftime('%d.%m.%Y')
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await query.edit_message_text(
                f"–í–∞—à –≤—ã–±–æ—Ä:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {formatted_date}\n"
                f"- –í—Ä–µ–º—è: {selected_time}"
            )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
callback_handler = CallbackQueryHandler(handle_message)
callback_handler2 = CallbackQueryHandler(my_booking, pattern="^my_booking$")
