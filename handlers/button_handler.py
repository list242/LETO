import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta
import calendar
ADMIN_FILE = "admins.json"
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
def load_admins():
    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as file:
            return set(json.load(file))
    except FileNotFoundError:
        return set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_admins(admin_chat_ids):
    with open(ADMIN_FILE, "w", encoding="utf-8") as file:
        json.dump(list(admin_chat_ids), file, ensure_ascii=False, indent=4)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_chat_ids = load_admins()

MAX_DATE = datetime(2025, 8, 31).date()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_chat_ids = set()
# –†—É—Å—Å–∫–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
RUSSIAN_DAY_ABBREVIATIONS = {0: "–ü–Ω",1: "–í—Ç",2: "–°—Ä",3: "–ß—Ç",4: "–ü—Ç",5: "–°–±",6: "–í—Å"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
def format_date(date):
    day_name = RUSSIAN_DAY_ABBREVIATIONS[date.weekday()]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "–ü–Ω", "–í—Ç", "–°—Ä"
    return f"{date.strftime('%d.%m.%Y')} ({day_name})"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
def generate_date_keyboard(start_date, context):
    keyboard = []
    current_date = start_date + timedelta(days=1)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    days_shown = 0

    # –î–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    if start_date == datetime.now().date():
        while days_shown < 7 and current_date.weekday() != calendar.SUNDAY and current_date <= MAX_DATE:
            date_str = format_date(current_date)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: DD.MM.YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
            callback_data = f"date-{current_date.isoformat()}"  # Callback-–¥–∞–Ω–Ω—ã–µ: YYYY-MM-DD
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
            current_date += timedelta(days=1)
            days_shown += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if current_date.weekday() == calendar.SUNDAY and current_date <= MAX_DATE:
            date_str = format_date(current_date)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: DD.MM.YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
            callback_data = f"date-{current_date.isoformat()}"  # Callback-–¥–∞–Ω–Ω—ã–µ: YYYY-MM-DD
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])

    # –î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ–¥–µ–ª—å: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ 7 –¥–Ω–µ–π –∏–ª–∏ –¥–æ MAX_DATE
    else:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º
        if current_date.weekday() != 0:  # –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É
            days_until_monday = (7 - current_date.weekday()) % 7
            current_date += timedelta(days=days_until_monday)

        for _ in range(7):
            if current_date > MAX_DATE:
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            date_str = format_date(current_date)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: DD.MM.YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
            callback_data = f"date-{current_date.isoformat()}"  # Callback-–¥–∞–Ω–Ω—ã–µ: YYYY-MM-DD
            keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
            current_date += timedelta(days=1)

    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
    if current_date > MAX_DATE:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    else:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data="forward")])
    return InlineKeyboardMarkup(keyboard)
async def start(update: Update, context):
    user_name = update.message.from_user.first_name
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def register_admin(update: Update, context):
    chat_id = update.message.chat_id
    if chat_id in admin_chat_ids:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    else:
        admin_chat_ids.add(chat_id)
        save_admins(admin_chat_ids)
        await update.message.reply_text(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞—à chat_id: {chat_id}")

async def notify_admin(context, message, user_chat_id):
    for admin_chat_id in admin_chat_ids:
        try:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–∫", callback_data=f"approve-{user_chat_id}"),
                    InlineKeyboardButton("‚ùå –ù–µ –æ–∫", callback_data=f"reject-{user_chat_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(chat_id=admin_chat_id, text=message, reply_markup=reply_markup)
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å chat_id: {admin_chat_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å chat_id {admin_chat_id}: {e}")

async def my_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    message = f"üîπ –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n- –õ–æ–¥–∫–∞: {boat}\n- –î–∞—Ç–∞: {date}\n- –í—Ä–µ–º—è: {time}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # –ï—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
    if query:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        data = query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –ª–æ–¥–∫—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if data in ["blue", "red", "white"]:
            selected_boat = {
                "blue": "–°–∏–Ω—è—è",
                "red": "–ö—Ä–∞—Å–Ω–∞—è",
                "white": "–ë–µ–ª–∞—è"
            }[data]
            context.user_data["selected_boat"] = selected_boat

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            today = datetime.now().date()
            context.user_data["current_week_start"] = today

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
            keyboard = generate_date_keyboard(today, context)
            reply_markup = keyboard

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {selected_boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif data.startswith("date-"):
            selected_date = data.replace("date-", "", 1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (YYYY-MM-DD)
            try:
                datetime.fromisoformat(selected_date)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                context.user_data["selected_date"] = selected_date
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            time_slots = [
                "11:00 - 12:30",
                "13:00 - 14:30",
                "15:00 - 16:30",
                "17:00 - 18:30",
                "19:00 - 20:30",
                "21:00 - 22:30"
            ]

            keyboard = []
            keyboard = [[InlineKeyboardButton(slot, callback_data=f"time-{slot}")] for slot in time_slots]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                reply_markup=reply_markup
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        elif data == "back":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())
            prev_week_start = current_week_start - timedelta(days=7)
            if prev_week_start < datetime.now().date():
                keyboard = [
                    [InlineKeyboardButton("–°–∏–Ω—è—è", callback_data="blue")],
                    [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è", callback_data="red")],
                    [InlineKeyboardButton("–ë–µ–ª–∞—è", callback_data="white")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫—É—é –ª–æ–¥–∫—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?",
                    reply_markup=reply_markup
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
                context.user_data["current_week_start"] = prev_week_start
                keyboard = generate_date_keyboard(prev_week_start, context)
                reply_markup = keyboard
                boat = context.user_data.get("selected_boat")
                await query.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=reply_markup
                )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        elif data == "back_to_start":
            keyboard = []

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ—è –∑–∞–ø–∏—Å—å"
            if "selected_boat" in context.user_data and "selected_date" in context.user_data and "selected_time" in context.user_data:
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±–æ—Ä –ª–æ–¥–∫–∏", –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
                keyboard.append([InlineKeyboardButton("üìå –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_booking")])

            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±–æ—Ä –ª–æ–¥–∫–∏"
            else:
                keyboard.append([InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")])

            keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])
            keyboard.append([InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", 
                reply_markup=reply_markup
            )


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
        elif data == "forward":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_week_start = context.user_data.get("current_week_start", datetime.now().date())

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            next_week_start = current_week_start + timedelta(days=7)
            context.user_data["current_week_start"] = next_week_start  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
            keyboard = generate_date_keyboard(next_week_start, context)
            reply_markup = keyboard

            boat = context.user_data.get("selected_boat")
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–¥–∫—É {boat}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=reply_markup
            )
        elif data == "faq":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                    "- üìÖ –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å?\n"
                    "- ‚öì –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?\n"
                    "- üë∂ –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
        elif data == "my_booking":
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")

            message = f"üìå –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n- –õ–æ–¥–∫–∞: {boat}\n- –î–∞—Ç–∞: {date}\n- –í—Ä–µ–º—è: {time}"

            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏", callback_data="cancel_booking")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏", callback_data="reschedule_booking")],
                [InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"# –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data == "cancel_booking":
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            user_chat_id = update.effective_user.id

            admin_message = (
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {date}\n"
                f"- –í—Ä–µ–º—è: {time}"
            )

            await notify_admin(context, admin_message, user_chat_id)

            user_message = "‚ùå –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω."
            keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(user_message, reply_markup=reply_markup)

        # –ü–µ—Ä–µ–Ω–æ—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data == "reschedule_booking":
            boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
            user_chat_id = update.effective_user.id

            admin_message = (
                f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {date}\n"
                f"- –í—Ä–µ–º—è: {time}"
            )

            await notify_admin(context, admin_message, user_chat_id)

            user_message = "üîÑ –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω."
            keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(user_message, reply_markup=reply_markup)

        elif data == "help":
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n"
                    "1Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É?\n"
                    "2Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–¥–∫–æ–π?\n"
                    "3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?\n"
                    "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        elif data.startswith("time-"):
            selected_time = data.replace("time-", "", 1)
            boat = context.user_data.get("selected_boat")
            date = context.user_data.get("selected_date")

            if not date or not isinstance(date, str):
                await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            try:
                formatted_date = datetime.fromisoformat(date).strftime('%d.%m.%Y')
            except ValueError:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            context.user_data["selected_time"] = selected_time

            keyboard = [[InlineKeyboardButton("üè† –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–í–∞—à –≤—ã–±–æ—Ä:\n"
                f"- –õ–æ–¥–∫–∞: {boat}\n"
                f"- –î–∞—Ç–∞: {formatted_date}\n"
                f"- –í—Ä–µ–º—è: {selected_time}",
                reply_markup=reply_markup
            )
        elif data.startswith("approve-"):
            user_chat_id = int(data.split("-")[1])

            try:
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.bot_data.pop(user_chat_id, None)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                keyboard = [[InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. "
                        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–¥–∫—É –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –±—Ä–æ–Ω—å.",
                    reply_markup=reply_markup
                )

                await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")
        
        elif data.startswith("reject-"):
            user_chat_id = int(data.split("-")[1])

            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞–∂–∏–º–∞–ª "–ù–µ –æ–∫", —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if context.bot_data.get(f"reject-{user_chat_id}"):
                context.bot_data.pop(user_chat_id, None)  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏
                context.bot_data.pop(f"reject-{user_chat_id}", None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

                try:
                    await context.bot.send_message(
                        chat_id=user_chat_id,
                        text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞."
                    )
                    await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ "–ù–µ –æ–∫" ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            else:
                context.bot_data[f"reject-{user_chat_id}"] = True  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞–∂–∞–ª–∏ "–ù–µ –æ–∫"

                user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_chat_id}\n" \
                            f"üö§ –õ–æ–¥–∫–∞: {context.bot_data.get(user_chat_id, {}).get('selected_boat', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                            f"üìÖ –î–∞—Ç–∞: {context.bot_data.get(user_chat_id, {}).get('selected_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                            f"‚è∞ –í—Ä–µ–º—è: {context.bot_data.get(user_chat_id, {}).get('selected_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–∫", callback_data=f"approve-{user_chat_id}")],
                    [InlineKeyboardButton("‚ùå –ù–µ –æ–∫", callback_data=f"reject-{user_chat_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:\n\n{user_info}",
                    reply_markup=reply_markup
                )

        elif data.startswith("final_approve-"):
            user_chat_id = int(data.split("-")[1])

            try:
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                         "–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±—Ä–æ–Ω—å."
                )

                await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")

        elif data.startswith("final_reject-"):
            user_chat_id = int(data.split("-")[1])

            try:
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                         "–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏–ª–µ."
                )

                await query.edit_message_text("‚ùå –ü–µ—Ä–µ–Ω–æ—Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
callback_handler = CallbackQueryHandler(handle_message)
callback_handler2 = CallbackQueryHandler(my_booking, pattern="^my_booking$")
