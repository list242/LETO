import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from datetime import datetime, timedelta
import calendar
#from handlers.handle_message import handle_message
#from handlers.utils import generate_date_keyboard, notify_admin, MAX_DATE, enter_name, enter_phone, handle_message
#from handlers.handle_message import handle_message  # ‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞!
from handlers.handle_message import handle_message
  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç 
from bookings_storage import save_booking_to_file, delete_booking, get_booking, get_all_bookings
from handlers.utils import load_admins, RUSSIAN_DAY_ABBREVIATIONS, ENTERING_NAME, ENTERING_PHONE, enter_name, enter_phone, get_taken_slots
SELECTING_TIME = range(3)
ADMIN_FILE = "admins.json"
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

quiz_questions = [
    {"question": "ü¶∫ –ù—É–∂–Ω–æ –ª–∏ –Ω–∞–¥–µ–≤–∞—Ç—å —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∂–∏–ª–µ—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?", "options": ["–î–∞, —è –∂–µ –Ω–µ —Ä—ã–±–∞", "–ù–µ—Ç, —è –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π"], "correct": 0},
    {"question": "üç∫ –ú–æ–∂–Ω–æ –ª–∏ –ø–∏—Ç—å –ø–∏–≤–æ –∑–∞ —Ä—É–ª–µ–º –ª–æ–¥–∫–∏?", "options": ["–ù–µ—Ç, —ç—Ç–æ –æ–ø–∞—Å–Ω–æ", "–î–∞, –∏ –∫–∞–ø–∏—Ç–∞–Ω—Å–∫–∏–π —Ä–æ–º —Ç–æ–∂–µ"], "correct": 0},
    {"question": "üö§ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ø—Ä–∞–≤–æ, –∫—É–¥–∞ –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª—å?", "options": ["–ù–∞–ø—Ä–∞–≤–æ", "–ù–∞–ª–µ–≤–æ (–ª–æ–≥–∏–∫–∞ –∂–µ)"], "correct": 0},
    {"question": "üìµ –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º?", "options": ["–ö–æ–≥–¥–∞ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é", "–í—Å–µ–≥–¥–∞, —è —Ç–∏–∫—Ç–æ–∫–µ—Ä"], "correct": 0},
    {"question": "üí• –ï—Å–ª–∏ –ª–æ–¥–∫–∞ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è?", "options": ["–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", "–ü–Ω—É—Ç—å –º–æ—Ç–æ—Ä –ø–æ—Å–∏–ª—å–Ω–µ–µ"], "correct": 0},
    {"question": "üåä –°–∫–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º –º–µ—Ç—Ä–æ–≤ –¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç –±–µ—Ä–µ–≥–∞?", "options": ["20 –º–µ—Ç—Ä–æ–≤", "2 –º–µ—Ç—Ä–∞, —á—Ç–æ–± –≤—Å–µ–º –≤–∏–¥–Ω–æ –±—ã–ª–æ"], "correct": 0},
    {"question": "üßí –ú–æ–∂–Ω–æ –ª–∏ –∫–∞—Ç–∞—Ç—å –¥–µ—Ç–µ–π –±–µ–∑ –∂–∏–ª–µ—Ç–∞?", "options": ["–ù–µ—Ç, –≤—Å–µ–≥–¥–∞ —Å –∂–∏–ª–µ—Ç–æ–º", "–î–∞, –ø—É—Å—Ç—å –∑–∞–∫–∞–ª—è—é—Ç—Å—è"], "correct": 0},
    {"question": "üß≠ –ü–æ—Ç–µ—Ä—è–ª—Å—è. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?", "options": ["–°–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ä–∞—Ü–∏–∏/—Ç–µ–ª–µ—Ñ–æ–Ω—É", "–û—Ä–∞—Ç—å –≤ –Ω–µ–±–æ"], "correct": 0},
    {"question": "‚öì –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ –∏ –≤–æ–ª–Ω–∞—Ö?", "options": ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –±–∞–∑—É", "–ì–Ω–∞—Ç—å –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ!"], "correct": 0},
    {"question": "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –Ω—É–∂–µ–Ω –¥–ª—è —á–µ–≥–æ?", "options": ["–ß—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∞–±–∫–∏", "–ß—Ç–æ–± –±—ã–ª–æ —á—Ç–æ —Å–∫–∏–Ω—É—Ç—å –¥—Ä—É–∑—å—è–º"], "correct": 0}
]


def save_admins(admin_chat_ids):
    with open(ADMIN_FILE, "w", encoding="utf-8") as file:
        json.dump(list(admin_chat_ids), file, ensure_ascii=False, indent=4)

admin_chat_ids = load_admins()
#admin_chat_ids = set()
#RUSSIAN_DAY_ABBREVIATIONS = {0: "–ü–Ω",1: "–í—Ç",2: "–°—Ä",3: "–ß—Ç",4: "–ü—Ç",5: "–°–±",6: "–í—Å"}

def format_date(date):
    day_name = RUSSIAN_DAY_ABBREVIATIONS[date.weekday()]  
    return f"{date.strftime('%d.%m.%Y')} ({day_name})"


async def start(update: Update, context):
    user_name = update.message.from_user.first_name
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫.")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_chat_id = update.effective_user.id
    # ‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ø–µ—Ä–µ–Ω–æ—Å, –æ—Ç–º–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ)
    admins = load_admins()
    if user_chat_id not in admins and context.bot_data.get(f"pending-{user_chat_id}"):

        if update.message:
            await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif update.callback_query:
            await update.callback_query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    keyboard = [
    [InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")],
    [InlineKeyboardButton("üì∑ –§–æ—Ç–æ –ª–æ–¥–æ–∫", callback_data="show_boat_photos")],
    [InlineKeyboardButton("üìò –ü—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", callback_data="start_quiz")]
    # [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    # [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
    ]


    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def register_admin(update: Update, context):
    chat_id = update.message.chat_id
    if chat_id in admin_chat_ids:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    else:
        admin_chat_ids.add(chat_id)
        save_admins(admin_chat_ids)
        await update.message.reply_text(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞—à chat_id: {chat_id}")

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str, user_chat_id: int):
    admin_chat_ids = load_admins()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not admin_chat_ids:
        print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for admin_chat_id in admin_chat_ids:
        try:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve-{user_chat_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject-{user_chat_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(chat_id=admin_chat_id, text=message, reply_markup=reply_markup)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}: {e}")

async def my_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_chat_id = update.effective_user.id
    booking = get_booking(user_chat_id)
    if not booking:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
        return
    await query.answer()
    boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    message = f"üîπ –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n- –õ–æ–¥–∫–∞: {boat}\n- –î–∞—Ç–∞: {date}\n- –í—Ä–µ–º—è: {time}"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def choose_boat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
    [InlineKeyboardButton("–°–∏–Ω—è—è –ª–æ–¥–∫–∞", callback_data="blue")],
    [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –ª–æ–¥–∫–∞", callback_data="red")],
    [InlineKeyboardButton("–ë–µ–ª–∞—è –ª–æ–¥–∫–∞", callback_data="white")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–¥–∫—É:", reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–¥–∫—É:", reply_markup=reply_markup)

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")]
        # [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        # [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        # [InlineKeyboardButton("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å",     callback_data="qa_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ MessageHandler
    states={
        SELECTING_TIME: [CallbackQueryHandler(handle_message)],
        ENTERING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
        ENTERING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)]
    },
    fallbacks=[
        CallbackQueryHandler(handle_back, pattern="^back_to_start$"),
        CommandHandler("cancel", cancel)
    ],
    per_chat=True  # –ó–∞–º–µ–Ω–∏–ª –Ω–∞ per_chat –≤–º–µ—Å—Ç–æ per_message
)
# async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
#     keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_text(
#         "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
#         "- üìÖ –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å?\n"
#         "- ‚öì –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?\n"
#         "- üë∂ –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É?\n"
#         "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É .",
#         reply_markup=reply_markup
#     )

# async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
#     keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_text(
#         "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n"
#         "1Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É?\n"
#         "2Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–¥–∫–æ–π?\n"
#         "3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?\n"
#         "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
#         reply_markup=reply_markup
#     )
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["quiz_step"] = 0
    await send_quiz_question(update, context)

async def send_quiz_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("quiz_step", 0)
    question_data = quiz_questions[step]

    buttons = [
        InlineKeyboardButton(text=opt, callback_data=f"quiz_{step}_{i}")
        for i, opt in enumerate(question_data["options"])
    ]
    keyboard = InlineKeyboardMarkup.from_row(buttons)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=question_data["question"],
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            text=question_data["question"],
            reply_markup=keyboard
        )

async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "quiz_0_1"

    try:
        _, step_str, answer_str = data.split("_")
        step = int(step_str)
        answer = int(answer_str)

        correct_answer = quiz_questions[step]["correct"]

        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if "quiz_correct" not in context.user_data:
            context.user_data["quiz_correct"] = 0
        if answer == correct_answer:
            context.user_data["quiz_correct"] += 1

        step += 1
        if step < len(quiz_questions):
            context.user_data["quiz_step"] = step
            await send_quiz_question(update, context)
        else:
            correct_count = context.user_data["quiz_correct"]
            total = len(quiz_questions)

            if correct_count >= 8:
                text = (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_count} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂! üö§"
                )
            else:
                text = (
                    f"‚ö†Ô∏è –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ {correct_count} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                    "–°–æ–≤–µ—Ç—É–µ–º –ø—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –µ—â—ë —Ä–∞–∑."
                )

            keyboard = [
                [InlineKeyboardButton("üîÅ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="start_quiz")],
                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
            context.user_data.pop("quiz_correct", None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ handle_quiz_answer:", e)
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")


async def finish_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = context.user_data["quiz_answers"]
    right = sum(1 for _, is_right in results if is_right)
    wrong = len(results) - right

    result_text = (
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {right}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {wrong}\n\n"
    )

    if wrong == 0:
        result_text += "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–ø–∞–¥—É –Ω–∞ –±–∞–±–∫–∏!"
    else:
        result_text += "üìò –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∞–±–∫–∏."

    keyboard = [[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(result_text, reply_markup=reply_markup)
# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
start_handler = CommandHandler("start", start)
# faq_handler = CallbackQueryHandler(faq_handler, pattern="^faq$")
# help_handler = CallbackQueryHandler(help_handler, pattern="^help$")
#back_handler = CallbackQueryHandler(start, pattern="^back_to_start$")
callback_handler = CallbackQueryHandler(handle_message)
callback_handler2 = CallbackQueryHandler(my_booking, pattern="^my_booking$")
boat_handler = CallbackQueryHandler(choose_boat, pattern="^select_boat$")
#approve_handler = CallbackQueryHandler(approve_booking, pattern="^approve-\\d+$")
