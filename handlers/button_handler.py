import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from datetime import datetime, timedelta
import calendar
#from handlers.handle_message import handle_message
#from handlers.utils import generate_date_keyboard, notify_admin, MAX_DATE, enter_name, enter_phone, handle_message
#from handlers.handle_message import handle_message  # ‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞!
from handlers.handle_message import handle_message
  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from handlers.utils import load_admins, RUSSIAN_DAY_ABBREVIATIONS, ENTERING_NAME, ENTERING_PHONE, enter_name, enter_phone 
SELECTING_TIME = range(3)
ADMIN_FILE = "admins.json"

def save_admins(admin_chat_ids):
    with open(ADMIN_FILE, "w", encoding="utf-8") as file:
        json.dump(list(admin_chat_ids), file, ensure_ascii=False, indent=4)

admin_chat_ids = load_admins()
#admin_chat_ids = set()
#RUSSIAN_DAY_ABBREVIATIONS = {0: "–ü–Ω",1: "–í—Ç",2: "–°—Ä",3: "–ß—Ç",4: "–ü—Ç",5: "–°–±",6: "–í—Å"}

def format_date(date):
    day_name = RUSSIAN_DAY_ABBREVIATIONS[date.weekday()]  
    return f"{date.strftime('%d.%m.%Y')} ({day_name})"


async def start(update: Update, context):
    user_name = update.message.from_user.first_name
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–¥–æ–∫.")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def register_admin(update: Update, context):
    chat_id = update.message.chat_id
    if chat_id in admin_chat_ids:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    else:
        admin_chat_ids.add(chat_id)
        save_admins(admin_chat_ids)
        await update.message.reply_text(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞—à chat_id: {chat_id}")

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str, user_chat_id: int):
    admin_chat_ids = load_admins()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not admin_chat_ids:
        print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for admin_chat_id in admin_chat_ids:
        try:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve-{user_chat_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject-{user_chat_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(chat_id=admin_chat_id, text=message, reply_markup=reply_markup)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}: {e}")

async def my_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    boat = context.user_data.get("selected_boat", "üö§ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    date = context.user_data.get("selected_date", "üìÖ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    time = context.user_data.get("selected_time", "‚è∞ –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    message = f"üîπ –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n- –õ–æ–¥–∫–∞: {boat}\n- –î–∞—Ç–∞: {date}\n- –í—Ä–µ–º—è: {time}"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def choose_boat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
    [InlineKeyboardButton("–°–∏–Ω—è—è –ª–æ–¥–∫–∞", callback_data="blue")],
    [InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –ª–æ–¥–∫–∞", callback_data="red")],
    [InlineKeyboardButton("–ë–µ–ª–∞—è –ª–æ–¥–∫–∞", callback_data="white")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–¥–∫—É:", reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–¥–∫—É:", reply_markup=reply_markup)

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üö§ –í—ã–±–æ—Ä –ª–æ–¥–∫–∏", callback_data="select_boat")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ MessageHandler
    states={
        SELECTING_TIME: [CallbackQueryHandler(handle_message)],
        ENTERING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
        ENTERING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)]
    },
    fallbacks=[
        CallbackQueryHandler(handle_back, pattern="^back_to_start$"),
        CommandHandler("cancel", cancel)
    ],
    per_chat=True  # –ó–∞–º–µ–Ω–∏–ª –Ω–∞ per_chat –≤–º–µ—Å—Ç–æ per_message
)
async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "- üìÖ –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±—Ä–æ–Ω—å?\n"
        "- ‚öì –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?\n"
        "- üë∂ –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É?\n"
        "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É .",
        reply_markup=reply_markup
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚ùì –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:\n"
        "1Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–¥–∫—É?\n"
        "2Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–¥–∫–æ–π?\n"
        "3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?\n"
        "üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )
async def approve_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∞–¥–º–∏–Ω
    user_chat_id = int(query.data.split("-")[1])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    try:
        await context.bot.send_message(
            chat_id=user_chat_id,
            text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ñ–¥—ë–º –≤–∞—Å!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
start_handler = CommandHandler("start", start)
faq_handler = CallbackQueryHandler(faq_handler, pattern="^faq$")
help_handler = CallbackQueryHandler(help_handler, pattern="^help$")
back_handler = CallbackQueryHandler(start, pattern="^back_to_start$")
callback_handler = CallbackQueryHandler(handle_message)
callback_handler2 = CallbackQueryHandler(my_booking, pattern="^my_booking$")
boat_handler = CallbackQueryHandler(choose_boat, pattern="^select_boat$")
approve_handler = CallbackQueryHandler(approve_booking, pattern="^approve-\\d+$")
